@model LMS_Learning_Management_System.Models.Mixed_VTeacher_Sales_Cards

@{
    ViewData["Title"] = "عرض البطاقات المباعة";
    // Layout = null;
}

<h1>المحتويات</h1>
<label for="searchInput">البحث:</label>
<input type="text" id="searchInput" />
<br />
<form asp-action="GetData" id="myForm">

    <label for="startDate">تاريخ البداية:</label>
    <input asp-for="startDate" type="date" id="startDate" />

    <label for="endDate">تاريخ النهاية:</label>
    <input asp-for="endDate" type="date" id="endDate" />

    <label for="teacherName">اسم المعلم:</label>
    <select asp-for="teacherName" id="teacherName" asp-items="ViewBag.TeacherId">
        <option value="">-- أختر --</option>
    </select>

    <label for="subject">المادة:</label>
    <select asp-for="subject1" id="subject" asp-items="ViewBag.SubjectId">
        <option value="">-- أختر --</option>

    </select>


    <button class="btn btn-primary" id="searchButton">بحث</button>
</form>


<!-- Dropdown for Rows per Page -->
<div>
    <label for="rowsPerPage">عدد الصفوف في الصفحة :</label>
    <select id="rowsPerPage">
        <option value="10">10</option>
        <option value="20">20</option>
        <option value="40">40</option>
        <option value="50">50</option>
    </select>
</div>

<br />
<button class="btn btn-primary" id="deliverSelectedRows">تسليم المحدد</button>

<table id="myTable" class="table table-striped table-bordered table-inverse table-responsive">
    <thead>
        <tr class="table-warning" style="text-align: -webkit-center; vertical-align: middle;">
            <th>رقم البطاقة</th>
            <th>قيمة البطاقة الكلية</th>
            <th>عدد مواد البطاقة</th>
            <th>القيمة النهائية لكل مادة</th>
            <th>الاسم الكامل</th>
            <th>الموضوع</th>
            <th>الصف</th>
            <th>القيمة</th>
            <th>مدفوع؟</th>
            <th>اسم الطالب</th>
            <th>تاريخ التسجيل</th>
            <th><input type="checkbox" id="selectAllCheckbox" /></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Teacher_Sales_Cards_Collection != null && Model.Teacher_Sales_Cards_Collection.Any())
        {
            @foreach (var item in Model.Teacher_Sales_Cards_Collection)
            {
                <tr>
                    <td>@item.CardNo</td>
                    <td>@item.CardPrice</td>
                    <td>@item.NumberOfSubjects</td>
                    <td>@item.TeacherCardPrice</td>
                    <td>@item.TeacherName</td>
                    <td>@item.Subject</td>
                    <td>@item.Class</td>
                    <td>@item.PaymentAmount</td>
                    <td style="color:@(item.IsPayment == true ? "greenyellow" : "orangered")">@if (item.IsPayment == true)
                        {
                            <text>مدفوع</text>
                        }
                        else
                        {
                            <text>غير مدفوع</text>
                        }</td>

                    <td>@item.StudentName</td>
                    <td>@item.CreatedDate.ToShortDateString()</td>
                    <td style="display:none">@item.CardSer</td>
                    <td>
                        @if (item.IsPayment != true)
                        {
                            <input type="checkbox" class="select-row-checkbox" />
                        }
                    </td>

                </tr>
            }
        }
        else
        {
            <tr><td colspan="12">لا يوجد بيانات</td></tr>
        }
    </tbody>
</table>
<div id="rowRange"></div>

<!-- Pagination Controls -->
<div id="pagination">
    <button id="prevPage" class="btn btn-outline-danger">السابق</button>
    <span id="pageNumbers"></span>
    <button id="nextPage" class="btn btn-outline-primary">التالي</button>
</div>


<script>
    // Function to generate table rows
    function generateTableRows(startIndex, endIndex) {
        var tableRows = document.querySelectorAll('#myTable tbody tr');
        for (var i = 0; i < tableRows.length; i++) {
            tableRows[i].style.display = 'none';
        }
        for (var i = startIndex; i < endIndex; i++) {
            tableRows[i].style.display = '';
        }
    }

    // Ensure currentPage, rowsPerPage, and totalRows are properly initialized
    var currentPage = 1; // Update with your initial value
    var rowsPerPage = 10; // Update with your initial value
    var totalRows = @Model.Teacher_Sales_Cards_Collection.Count(); // Update to dynamically get the total number of rows

    // Function to update the row range display
    function updateRowRange() {
        var startIndex = (currentPage - 1) * rowsPerPage + 1;
        var endIndex = Math.min(currentPage * rowsPerPage, totalRows);
        var rowRangeElement = document.getElementById('rowRange');

        // Update the row range display
        if (!isNaN(startIndex) && !isNaN(endIndex) && !isNaN(totalRows)) {
            rowRangeElement.textContent = 'عرض ' + startIndex + ' من ' + endIndex + ' الى ' + totalRows + ' صفوف';
        } else {
            rowRangeElement.textContent = 'Invalid row range';
        }
    }

    // Call the updateRowRange function initially and whenever currentPage, rowsPerPage, or totalRows changes
    updateRowRange();

    // Call updateRowRange function initially and whenever currentPage or rowsPerPage changes
    updateRowRange(currentPage, rowsPerPage, totalRows);
    // Initial page setup
    var currentPage = 1;
    var rowsPerPage = 10;
    var totalRows = document.querySelectorAll('#myTable tbody tr').length;
    var totalPages = Math.ceil(totalRows / rowsPerPage);
    generateTableRows(0, rowsPerPage);

    // Update pagination controls
    function updatePagination() {
        var pageNumbers = document.getElementById('pageNumbers');
        pageNumbers.textContent = 'Page ' + currentPage + ' of ' + totalPages;
    }

    // Event listeners for pagination
    document.getElementById('prevPage').addEventListener('click', function () {
        if (currentPage > 1) {
            currentPage--;
            generateTableRows((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);
            updatePagination();
        }
    });

    document.getElementById('nextPage').addEventListener('click', function () {
        if (currentPage < totalPages) {
            currentPage++;
            generateTableRows((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);
            updatePagination();
        }
    });

    // Event listener for rows per page dropdown
    document.getElementById('rowsPerPage').addEventListener('change', function () {
        rowsPerPage = parseInt(this.value);
        totalPages = Math.ceil(totalRows / rowsPerPage);
        currentPage = 1;
        generateTableRows(0, rowsPerPage);
        updatePagination();
    });
</script>

<script src="~/js/jquery3.3.1.js"></script>




<script>

    $(document).ready(function () {

        // Add an event listener for keyup on the search input
        $("#searchInput").on("keyup", function () {
            // Get the value from the search input and convert to lowercase
            var value = $(this).val().toLowerCase();

            // Filter the rows in the table body
            $("#myTable tbody tr").filter(function () {
                // Toggle the visibility of each row based on the search value
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
            });
        });

        // تحديد الكل
        $("#selectAllCheckbox").on("change", function () {
            // Get the visible rows only
            var visibleRows = $("#myTable tbody tr:visible");

            // Check or uncheck the checkboxes for the visible rows
            visibleRows.find(".select-row-checkbox").prop("checked", $(this).prop("checked"));
        });

        // // تحديد الكل
        // $("#selectAllCheckbox").on("change", function () {
        //     $(".select-row-checkbox").prop("checked", $(this).prop("checked"));
        // });

        // تحديد الصف الحالي
        $(".select-row-checkbox").on("change", function () {
            $("#selectAllCheckbox").prop("checked", false);
        });

        // زر تسليم
        $("#deliverSelectedRows").on("click", function () {
            if (confirm("هل انت متأكد من البيانات المحددة بالاسفل؟")) {
                // جمع الصفوف المحددة
                var selectedRows = $(".select-row-checkbox:checked");

                // التحقق من وجود صفوف محددة
                if (selectedRows.length === 0) {
                    alert("الرجاء تحديد صفوف قبل النقر على زر 'تسليم'");
                    return;
                }

                // قم بتنفيذ الإجراء المناسب لتسليم الصفوف المحددة
                var cardnoArray = [];
                var CardSerArray = [];
                var amountArray = [];

                selectedRows.each(function () {
                    var row = $(this).closest("tr");
                    cardnoArray.push(row.find("td:first-child").text());
                    amountArray.push(row.find("td:eq(3)").text());
                    CardSerArray.push(row.find("td:eq(11)").text());
                });

                // إرسال البيانات إلى الخادم
                $.post("/Academy/TeacherCardsSales/Pay", { cardno: cardnoArray, CardSer: CardSerArray, amount: amountArray }, function (data) {
                    // إعادة تحميل الصفحة بعد الانتهاء
                    window.location.reload();
                });
            } else {
                return false;
            }
        });


        $("#searchByDateRange").on("click", function () {
            var startDateValue = $("#startDate").val();
            var endDateValue = $("#endDate").val();

            // التحقق من أن الحقول غير فارغة
            if (!startDateValue || !endDateValue) {
                alert("الرجاء إدخال تاريخ البداية وتاريخ النهاية");
                return;
            }

            // قم بتنفيذ البحث بناءً على نطاق التاريخ
            $.post("/Academy/TeacherCardsSales/SearchByDateRange", { startDate: startDateValue, endDate: endDateValue }, function (data) {
                // تحديث جدول البيانات بناءً على النتائج المسترجعة
                $("#dataTable tbody").empty(); // حذف البيانات الحالية
                $.each(data, function (index, item) {
                    $("#dataTable tbody").append("<tr><td>" + item.CardNumber + "</td><td>" + item.SaleDate + "</td></tr>");
                    // ... (قم بإضافة الأعمدة الأخرى حسب الحاجة)
                });
            });
        });

    });
    function updateTable(data) {
        var tbody = $('#dataTable tbody');
        tbody.empty();

        for (var i = 0; i < data.length; i++) {
            var row = '<tr>' +
                // الأعمدة هنا
                '</tr>';

            tbody.append(row);
        }
    }



</script>